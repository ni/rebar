<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeviceDisplayInfo_RebarTargetDisplayName" xml:space="preserve">
    <value>Rebar Device</value>
  </data>
  <data name="FeatureNotEnabled" xml:space="preserve">
    <value>Using this node requires a preview feature to be enabled.</value>
  </data>
  <data name="FeatureToggle_AllIntegerTypes_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_AllIntegerTypes_Description" xml:space="preserve">
    <value>Enable support for all integer data types.</value>
  </data>
  <data name="FeatureToggle_CellDataType_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_CellDataType_Description" xml:space="preserve">
    <value>Enable the Cell data type and related nodes</value>
  </data>
  <data name="FeatureToggle_FileHandleDataType_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_FileHandleDataType_Description" xml:space="preserve">
    <value>Enable File Handle data type and related nodes</value>
  </data>
  <data name="FeatureToggle_NotifierType_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_NotifierType_Description" xml:space="preserve">
    <value>Enable the Notifier data type and related nodes</value>
  </data>
  <data name="FeatureToggle_OptionPatternStructure_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_OptionPatternStructure_Description" xml:space="preserve">
    <value>Enable the pattern-matching structure for the Option data type</value>
  </data>
  <data name="FeatureToggle_OutputNode_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_OutputNode_Description" xml:space="preserve">
    <value>Enable the Output node</value>
  </data>
  <data name="FeatureToggle_Panics_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_Panics_Description" xml:space="preserve">
    <value>Enable nodes and functions that can panic</value>
  </data>
  <data name="FeatureToggle_ParametersAndCalls_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_ParametersAndCalls_Description" xml:space="preserve">
    <value>Enable adding parameters to function diagrams and function calls</value>
  </data>
  <data name="FeatureToggle_RebarTarget_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_RebarTarget_Description" xml:space="preserve">
    <value>Enable the Rebar execution target</value>
  </data>
  <data name="FeatureToggle_StringDataType_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_StringDataType_Description" xml:space="preserve">
    <value>Enable string and string slice data types and related nodes</value>
  </data>
  <data name="FeatureToggle_VariantTypes_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_VariantTypes_Description" xml:space="preserve">
    <value>Enable defining and using variant types</value>
  </data>
  <data name="FeatureToggle_VectorAndSliceTypes_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_VectorAndSliceTypes_Description" xml:space="preserve">
    <value>Enable vector and slice data types and related nodes</value>
  </data>
  <data name="FeatureToggle_VisualizeVariableIdentity_Category" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="FeatureToggle_VisualizeVariableIdentity_Description" xml:space="preserve">
    <value>Enable visualization of variable identities on wires</value>
  </data>
  <data name="FunctionDocumentType_DefaultDocumentName" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="FunctionDocumentType_DisplayName" xml:space="preserve">
    <value>Rebar Function</value>
  </data>
  <data name="ModuleDisplayInfo_RebarModuleDisplayName" xml:space="preserve">
    <value>Rebar Module</value>
  </data>
  <data name="ParameterNotOnConnectorPane" xml:space="preserve">
    <value>This accessor's parameter is not on the connector pane.</value>
  </data>
  <data name="RebarPaletteCategory_RebarPaletteDisplayName" xml:space="preserve">
    <value>Rebar</value>
  </data>
  <data name="TerminalDoesNotAcceptImmutableType" xml:space="preserve">
    <value>This terminal cannot accept a wired immutable type.</value>
  </data>
  <data name="TerminalDoesNotAcceptReference" xml:space="preserve">
    <value>This terminal cannot accept a wired reference type.</value>
  </data>
  <data name="TerminateLifetimeInputLifetimeCannotBeTerminated" xml:space="preserve">
    <value>The lifetime of values wired to this node cannot be terminated with this node.</value>
  </data>
  <data name="TerminateLifetimeInputLifetimesNotUnique" xml:space="preserve">
    <value>The values wired to this node do not all share the same lifetime.</value>
  </data>
  <data name="TerminateLifetimeNotAllVariablesInLifetimeConnected" xml:space="preserve">
    <value>The scope that this node terminates contains at least one variable that is not wired.</value>
  </data>
  <data name="TypeDiagramDocumentType_DefaultDocumentName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="TypeDiagramDocumentType_DisplayName" xml:space="preserve">
    <value>Type Diagram</value>
  </data>
  <data name="TypeDoesNotHaveRequiredTrait" xml:space="preserve">
    <value>This terminal requires a trait that the connected data type does not implement</value>
  </data>
  <data name="TypeIsNotStructType" xml:space="preserve">
    <value>The connected data type is not a struct type.</value>
  </data>
  <data name="TypeIsNotVariantType" xml:space="preserve">
    <value>The connected data type is not a variant type.</value>
  </data>
  <data name="TypeNotDetermined" xml:space="preserve">
    <value>The type of value created by this terminal has not been fully determined.</value>
  </data>
  <data name="WireCannotFork" xml:space="preserve">
    <value>The data type of this wire does not allow it to branch.</value>
  </data>
  <data name="WiredReferenceDoesNotLiveLongEnough" xml:space="preserve">
    <value>The reference wired to this terminal does not live long enough.</value>
  </data>
</root>